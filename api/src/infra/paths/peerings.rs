/*
 * Event Store Cloud Infra API
 *
 * Creates infrastructure needed to work with Event Store DB instances
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// Creates a peering request
pub async fn create_peering(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    create_peering_request: crate::infra::models::CreatePeeringRequest,
) -> crate::Result<crate::infra::models::CreatePeeringResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/peerings",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender.send_request::<
        super::super::CreatePeeringRequest,
        crate::infra::models::CreatePeeringResponse
    >(
        Method::POST,
        url,
        Some(&create_peering_request), None
    ).await
}
/// Creates peerings commands
pub async fn create_peering_commands(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    create_peering_commands_request: crate::infra::models::CreatePeeringCommandsRequest,
) -> crate::Result<crate::infra::models::CreatePeeringCommandsResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/peerings/commands",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender.send_request::<
        super::super::CreatePeeringCommandsRequest,
        crate::infra::models::CreatePeeringCommandsResponse
    >(
        Method::POST,
        url,
        Some(&create_peering_commands_request), None
    ).await
}
/// deletes a peering
pub async fn delete_peering(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    peering_id: crate::types::PeeringId,
) -> crate::Result<()> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/peerings/{peeringId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        peeringId = crate::utils::urlencode(peering_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// retrieves a peering
pub async fn get_peering(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    peering_id: crate::types::PeeringId,
) -> crate::Result<crate::infra::models::GetPeeringResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/peerings/{peeringId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        peeringId = crate::utils::urlencode(peering_id)
    );

    sender
        .send_request::<(), crate::infra::models::GetPeeringResponse>(Method::GET, url, None, None)
        .await
}
/// list all peerings
pub async fn list_peerings(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<crate::infra::models::ListPeeringsResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/peerings",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::infra::models::ListPeeringsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// updates a peering
pub async fn update_peering(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    peering_id: crate::types::PeeringId,
    update_peering_request: crate::infra::models::UpdatePeeringRequest,
) -> crate::Result<()> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/peerings/{peeringId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        peeringId = crate::utils::urlencode(peering_id)
    );

    sender
        .send_request::<super::super::UpdatePeeringRequest, ()>(
            Method::PUT,
            url,
            Some(&update_peering_request),
            Some(()),
        )
        .await
}

pub struct Peerings {
    sender: EscRequestSender,
}

impl<'a> Peerings {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// Creates a peering request
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        create_peering_request: crate::infra::models::CreatePeeringRequest,
    ) -> crate::Result<crate::infra::models::CreatePeeringResponse> {
        create_peering(
            &self.sender,
            organization_id,
            project_id,
            create_peering_request,
        )
        .await
    }

    /// Creates peerings commands
    pub async fn create_commands(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        create_peering_commands_request: crate::infra::models::CreatePeeringCommandsRequest,
    ) -> crate::Result<crate::infra::models::CreatePeeringCommandsResponse> {
        create_peering_commands(
            &self.sender,
            organization_id,
            project_id,
            create_peering_commands_request,
        )
        .await
    }

    /// deletes a peering
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        peering_id: crate::types::PeeringId,
    ) -> crate::Result<()> {
        delete_peering(&self.sender, organization_id, project_id, peering_id).await
    }

    /// retrieves a peering
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        peering_id: crate::types::PeeringId,
    ) -> crate::Result<crate::infra::models::GetPeeringResponse> {
        get_peering(&self.sender, organization_id, project_id, peering_id).await
    }

    /// list all peerings
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<crate::infra::models::ListPeeringsResponse> {
        list_peerings(&self.sender, organization_id, project_id).await
    }

    /// updates a peering
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        peering_id: crate::types::PeeringId,
        update_peering_request: crate::infra::models::UpdatePeeringRequest,
    ) -> crate::Result<()> {
        update_peering(
            &self.sender,
            organization_id,
            project_id,
            peering_id,
            update_peering_request,
        )
        .await
    }
} // end Peerings
