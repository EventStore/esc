/*
 * Event Store Cloud Infra API
 *
 * Creates infrastructure needed to work with Event Store DB instances
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// creates a new network
pub async fn create_network(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    create_network_request: crate::infra::models::CreateNetworkRequest,
) -> crate::Result<crate::infra::models::CreateNetworkResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/networks",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender.send_request::<
        super::super::CreateNetworkRequest,
        crate::infra::models::CreateNetworkResponse
    >(
        Method::POST,
        url,
        Some(&create_network_request), None
    ).await
}
/// deletes a network
pub async fn delete_network(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    network_id: crate::types::NetworkId,
) -> crate::Result<()> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/networks/{networkId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        networkId = crate::utils::urlencode(network_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// gets a single network
pub async fn get_network(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    network_id: crate::types::NetworkId,
) -> crate::Result<crate::infra::models::GetNetworkResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/networks/{networkId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        networkId = crate::utils::urlencode(network_id)
    );

    sender
        .send_request::<(), crate::infra::models::GetNetworkResponse>(Method::GET, url, None, None)
        .await
}
/// lists all networks under the given project
pub async fn list_networks(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<crate::infra::models::ListNetworksResponse> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/networks",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::infra::models::ListNetworksResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// updates the given network
pub async fn update_network(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    network_id: crate::types::NetworkId,
    update_network_request: crate::infra::models::UpdateNetworkRequest,
) -> crate::Result<()> {
    let url = format!(
        "/infra/v1/organizations/{organizationId}/projects/{projectId}/networks/{networkId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        networkId = crate::utils::urlencode(network_id)
    );

    sender
        .send_request::<super::super::UpdateNetworkRequest, ()>(
            Method::PUT,
            url,
            Some(&update_network_request),
            Some(()),
        )
        .await
}

pub struct Networks {
    sender: EscRequestSender,
}

impl<'a> Networks {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// creates a new network
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        create_network_request: crate::infra::models::CreateNetworkRequest,
    ) -> crate::Result<crate::infra::models::CreateNetworkResponse> {
        create_network(
            &self.sender,
            organization_id,
            project_id,
            create_network_request,
        )
        .await
    }

    /// deletes a network
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        network_id: crate::types::NetworkId,
    ) -> crate::Result<()> {
        delete_network(&self.sender, organization_id, project_id, network_id).await
    }

    /// gets a single network
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        network_id: crate::types::NetworkId,
    ) -> crate::Result<crate::infra::models::GetNetworkResponse> {
        get_network(&self.sender, organization_id, project_id, network_id).await
    }

    /// lists all networks under the given project
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<crate::infra::models::ListNetworksResponse> {
        list_networks(&self.sender, organization_id, project_id).await
    }

    /// updates the given network
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        network_id: crate::types::NetworkId,
        update_network_request: crate::infra::models::UpdateNetworkRequest,
    ) -> crate::Result<()> {
        update_network(
            &self.sender,
            organization_id,
            project_id,
            network_id,
            update_network_request,
        )
        .await
    }
} // end Networks
