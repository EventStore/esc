/*
 * Event Store Access API
 *
 * manages access control for the Event Store Cloud
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// deletes a token TODO - this likely needs to change the security stuff as well
pub async fn delete_user_token(sender: &EscRequestSender, token_id: &str) -> crate::Result<()> {
    let url = format!(
        "/access/v1/tokens/user/{tokenId}",
        tokenId = crate::utils::urlencode(token_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// fetchs a token user. TODO - this is probably not described correctly. Likely the security setting will need to change here to work correctly.
pub async fn list_user_tokens(
    sender: &EscRequestSender,
) -> crate::Result<crate::access::models::ListUserRefreshTokensResponse> {
    let url = format!("/access/v1/tokens/user");

    sender
        .send_request::<(), crate::access::models::ListUserRefreshTokensResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}

pub struct Tokens {
    sender: EscRequestSender,
}

impl<'a> Tokens {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// deletes a token TODO - this likely needs to change the security stuff as well
    pub async fn delete_user_token(&self, token_id: &str) -> crate::Result<()> {
        delete_user_token(&self.sender, token_id).await
    }

    /// fetchs a token user. TODO - this is probably not described correctly. Likely the security setting will need to change here to work correctly.
    pub async fn list_user_tokens(
        &self,
    ) -> crate::Result<crate::access::models::ListUserRefreshTokensResponse> {
        list_user_tokens(&self.sender).await
    }
} // end Tokens
