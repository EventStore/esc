/*
 * Event Store Access API
 *
 * manages access control for the Event Store Cloud
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// creates a new policy
pub async fn create_policy(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    create_policy_request: crate::access::models::CreatePolicyRequest,
) -> crate::Result<crate::access::models::CreatePolicyResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/policies",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender.send_request::<
        super::super::CreatePolicyRequest,
        crate::access::models::CreatePolicyResponse
    >(
        Method::POST,
        url,
        Some(&create_policy_request), None
    ).await
}
/// deletes a policy
pub async fn delete_policy(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    policy_id: crate::types::PolicyId,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/policies/{policyId}",
        organizationId = crate::utils::urlencode(organization_id),
        policyId = crate::utils::urlencode(policy_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// gets a single policy
pub async fn get_policy(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    policy_id: crate::types::PolicyId,
) -> crate::Result<crate::access::models::GetPolicyResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/policies/{policyId}",
        organizationId = crate::utils::urlencode(organization_id),
        policyId = crate::utils::urlencode(policy_id)
    );

    sender
        .send_request::<(), crate::access::models::GetPolicyResponse>(Method::GET, url, None, None)
        .await
}
/// gets a list of policies
pub async fn list_policies(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<crate::access::models::ListPoliciesResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/policies",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::access::models::ListPoliciesResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// checks to see if a policy is accepted
pub async fn policy_allowed(
    sender: &EscRequestSender,
    policy_allowed_request: crate::access::models::PolicyAllowedRequest,
) -> crate::Result<crate::access::models::PolicyAllowedResponse> {
    let url = format!("/access/v1/policy/allowed");

    sender.send_request::<
        super::super::PolicyAllowedRequest,
        crate::access::models::PolicyAllowedResponse
    >(
        Method::POST,
        url,
        Some(&policy_allowed_request), None
    ).await
}
/// modifies the policy
pub async fn update_policy(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    policy_id: crate::types::PolicyId,
    update_policy_request: crate::access::models::UpdatePolicyRequest,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/policies/{policyId}",
        organizationId = crate::utils::urlencode(organization_id),
        policyId = crate::utils::urlencode(policy_id)
    );

    sender
        .send_request::<super::super::UpdatePolicyRequest, ()>(
            Method::PUT,
            url,
            Some(&update_policy_request),
            Some(()),
        )
        .await
}

pub struct Policies {
    sender: EscRequestSender,
}

impl<'a> Policies {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// creates a new policy
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        create_policy_request: crate::access::models::CreatePolicyRequest,
    ) -> crate::Result<crate::access::models::CreatePolicyResponse> {
        create_policy(&self.sender, organization_id, create_policy_request).await
    }

    /// deletes a policy
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        policy_id: crate::types::PolicyId,
    ) -> crate::Result<()> {
        delete_policy(&self.sender, organization_id, policy_id).await
    }

    /// gets a single policy
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        policy_id: crate::types::PolicyId,
    ) -> crate::Result<crate::access::models::GetPolicyResponse> {
        get_policy(&self.sender, organization_id, policy_id).await
    }

    /// gets a list of policies
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
    ) -> crate::Result<crate::access::models::ListPoliciesResponse> {
        list_policies(&self.sender, organization_id).await
    }

    /// checks to see if a policy is accepted
    pub async fn policy_allowed(
        &self,
        policy_allowed_request: crate::access::models::PolicyAllowedRequest,
    ) -> crate::Result<crate::access::models::PolicyAllowedResponse> {
        policy_allowed(&self.sender, policy_allowed_request).await
    }

    /// modifies the policy
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        policy_id: crate::types::PolicyId,
        update_policy_request: crate::access::models::UpdatePolicyRequest,
    ) -> crate::Result<()> {
        update_policy(
            &self.sender,
            organization_id,
            policy_id,
            update_policy_request,
        )
        .await
    }
} // end Policies
