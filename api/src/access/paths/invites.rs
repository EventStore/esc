/*
 * Event Store Access API
 *
 * manages access control for the Event Store Cloud
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// creates a new invite
pub async fn create_invite(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    create_invite_request: crate::access::models::CreateInviteRequest,
) -> crate::Result<crate::access::models::CreateInviteResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/invites",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender.send_request::<
        super::super::CreateInviteRequest,
        crate::access::models::CreateInviteResponse
    >(
        Method::POST,
        url,
        Some(&create_invite_request), None
    ).await
}
/// deletes an invite
pub async fn delete_invite(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    invite_id: crate::types::InviteId,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/invites/{inviteId}",
        organizationId = crate::utils::urlencode(organization_id),
        inviteId = crate::utils::urlencode(invite_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// lists invites
pub async fn list_invites(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<crate::access::models::ListInvitesResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/invites",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::access::models::ListInvitesResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// resends an invite
pub async fn resend_invite(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    resend_invite_request: crate::access::models::ResendInviteRequest,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/invites",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<super::super::ResendInviteRequest, ()>(
            Method::PUT,
            url,
            Some(&resend_invite_request),
            Some(()),
        )
        .await
}

pub struct Invites {
    sender: EscRequestSender,
}

impl<'a> Invites {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// creates a new invite
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        create_invite_request: crate::access::models::CreateInviteRequest,
    ) -> crate::Result<crate::access::models::CreateInviteResponse> {
        create_invite(&self.sender, organization_id, create_invite_request).await
    }

    /// deletes an invite
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        invite_id: crate::types::InviteId,
    ) -> crate::Result<()> {
        delete_invite(&self.sender, organization_id, invite_id).await
    }

    /// lists invites
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
    ) -> crate::Result<crate::access::models::ListInvitesResponse> {
        list_invites(&self.sender, organization_id).await
    }

    /// resends an invite
    pub async fn resend_invite(
        &self,
        organization_id: crate::types::OrgId,
        resend_invite_request: crate::access::models::ResendInviteRequest,
    ) -> crate::Result<()> {
        resend_invite(&self.sender, organization_id, resend_invite_request).await
    }
} // end Invites
