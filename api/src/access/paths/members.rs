/*
 * Event Store Access API
 *
 * manages access control for the Event Store Cloud
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// deletes a member
pub async fn delete_member(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    member_id: &str,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/members/{memberId}",
        organizationId = crate::utils::urlencode(organization_id),
        memberId = crate::utils::urlencode(member_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// gets a member
pub async fn get_member(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    member_id: &str,
) -> crate::Result<crate::access::models::GetMemberResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/members/{memberId}",
        organizationId = crate::utils::urlencode(organization_id),
        memberId = crate::utils::urlencode(member_id)
    );

    sender
        .send_request::<(), crate::access::models::GetMemberResponse>(Method::GET, url, None, None)
        .await
}
/// lists members
pub async fn list_members(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<crate::access::models::ListMembersResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/members",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::access::models::ListMembersResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// updates the member
pub async fn update_member(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    member_id: &str,
    update_member_request: crate::access::models::UpdateMemberRequest,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/members/{memberId}",
        organizationId = crate::utils::urlencode(organization_id),
        memberId = crate::utils::urlencode(member_id)
    );

    sender
        .send_request::<super::super::UpdateMemberRequest, ()>(
            Method::PUT,
            url,
            Some(&update_member_request),
            Some(()),
        )
        .await
}

pub struct Members {
    sender: EscRequestSender,
}

impl<'a> Members {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// deletes a member
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        member_id: &str,
    ) -> crate::Result<()> {
        delete_member(&self.sender, organization_id, member_id).await
    }

    /// gets a member
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        member_id: &str,
    ) -> crate::Result<crate::access::models::GetMemberResponse> {
        get_member(&self.sender, organization_id, member_id).await
    }

    /// lists members
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
    ) -> crate::Result<crate::access::models::ListMembersResponse> {
        list_members(&self.sender, organization_id).await
    }

    /// updates the member
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        member_id: &str,
        update_member_request: crate::access::models::UpdateMemberRequest,
    ) -> crate::Result<()> {
        update_member(
            &self.sender,
            organization_id,
            member_id,
            update_member_request,
        )
        .await
    }
} // end Members
