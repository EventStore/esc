/*
 * Event Store Access API
 *
 * manages access control for the Event Store Cloud
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// creates a new group
pub async fn create_group(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    create_group_request: crate::access::models::CreateGroupRequest,
) -> crate::Result<crate::access::models::CreateGroupResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/groups",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender.send_request::<
        super::super::CreateGroupRequest,
        crate::access::models::CreateGroupResponse
    >(
        Method::POST,
        url,
        Some(&create_group_request), None
    ).await
}
/// deletes a group
pub async fn delete_group(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    group_id: crate::types::GroupId,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/groups/{groupId}",
        organizationId = crate::utils::urlencode(organization_id),
        groupId = crate::utils::urlencode(group_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// gets a single group
pub async fn get_group(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    group_id: crate::types::GroupId,
) -> crate::Result<crate::access::models::GetGroupResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/groups/{groupId}",
        organizationId = crate::utils::urlencode(organization_id),
        groupId = crate::utils::urlencode(group_id)
    );

    sender
        .send_request::<(), crate::access::models::GetGroupResponse>(Method::GET, url, None, None)
        .await
}
/// list groups
pub async fn list_groups(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    linked_resource: Option<String>,
) -> crate::Result<crate::access::models::ListGroupsResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/groups",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::access::models::ListGroupsResponse>(Method::GET, url, None, None)
        .await
}
/// updates a group
pub async fn update_group(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    group_id: crate::types::GroupId,
    update_group_request: crate::access::models::UpdateGroupRequest,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/groups/{groupId}",
        organizationId = crate::utils::urlencode(organization_id),
        groupId = crate::utils::urlencode(group_id)
    );

    sender
        .send_request::<super::super::UpdateGroupRequest, ()>(
            Method::PUT,
            url,
            Some(&update_group_request),
            Some(()),
        )
        .await
}

pub struct Groups {
    sender: EscRequestSender,
}

impl<'a> Groups {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// creates a new group
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        create_group_request: crate::access::models::CreateGroupRequest,
    ) -> crate::Result<crate::access::models::CreateGroupResponse> {
        create_group(&self.sender, organization_id, create_group_request).await
    }

    /// deletes a group
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        group_id: crate::types::GroupId,
    ) -> crate::Result<()> {
        delete_group(&self.sender, organization_id, group_id).await
    }

    /// gets a single group
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        group_id: crate::types::GroupId,
    ) -> crate::Result<crate::access::models::GetGroupResponse> {
        get_group(&self.sender, organization_id, group_id).await
    }

    /// list groups
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        linked_resource: Option<String>,
    ) -> crate::Result<crate::access::models::ListGroupsResponse> {
        list_groups(&self.sender, organization_id, linked_resource).await
    }

    /// updates a group
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        group_id: crate::types::GroupId,
        update_group_request: crate::access::models::UpdateGroupRequest,
    ) -> crate::Result<()> {
        update_group(
            &self.sender,
            organization_id,
            group_id,
            update_group_request,
        )
        .await
    }
} // end Groups
