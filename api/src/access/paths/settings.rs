/*
 * Event Store Access API
 *
 * manages access control for the Event Store Cloud
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// gets the settings of an organization
pub async fn get_settings(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<crate::access::models::GetSettingsResponse> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/settings",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::access::models::GetSettingsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// updates the settings of an organization
pub async fn update_setting(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    update_settings_request: crate::access::models::UpdateSettingsRequest,
) -> crate::Result<()> {
    let url = format!(
        "/access/v1/organizations/{organizationId}/settings",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<super::super::UpdateSettingsRequest, ()>(
            Method::PUT,
            url,
            Some(&update_settings_request),
            Some(()),
        )
        .await
}

pub struct Settings {
    sender: EscRequestSender,
}

impl<'a> Settings {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// gets the settings of an organization
    pub async fn gets(
        &self,
        organization_id: crate::types::OrgId,
    ) -> crate::Result<crate::access::models::GetSettingsResponse> {
        get_settings(&self.sender, organization_id).await
    }

    /// updates the settings of an organization
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        update_settings_request: crate::access::models::UpdateSettingsRequest,
    ) -> crate::Result<()> {
        update_setting(&self.sender, organization_id, update_settings_request).await
    }
} // end Settings
