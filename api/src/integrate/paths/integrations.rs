/*
 * Event Store Integrate API
 *
 * Manages third-party integrations with the Event Store Cloud.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// Creates a new integration
pub async fn create_integration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    create_integration_request: crate::integrate::models::CreateIntegrationRequest,
) -> crate::Result<crate::integrate::models::CreateIntegrationResponse> {
    let url = format!(
        "/integrate/v1/organizations/{organizationId}/projects/{projectId}/integrations",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender.send_request::<
        super::super::CreateIntegrationRequest,
        crate::integrate::models::CreateIntegrationResponse
    >(
        Method::POST,
        url,
        Some(&create_integration_request), None
    ).await
}
/// deletes a integration
pub async fn delete_integration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    integration_id: crate::types::IntegrationId,
) -> crate::Result<()> {
    let url = format!("/integrate/v1/organizations/{organizationId}/projects/{projectId}/integrations/{integrationId}", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), integrationId=crate::utils::urlencode(integration_id));

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// retrieves a integration
pub async fn get_integration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    integration_id: crate::types::IntegrationId,
) -> crate::Result<crate::integrate::models::GetIntegrationResponse> {
    let url = format!("/integrate/v1/organizations/{organizationId}/projects/{projectId}/integrations/{integrationId}", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), integrationId=crate::utils::urlencode(integration_id));

    sender
        .send_request::<(), crate::integrate::models::GetIntegrationResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// list all integrations
pub async fn list_integrations(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<crate::integrate::models::ListIntegrationsResponse> {
    let url = format!(
        "/integrate/v1/organizations/{organizationId}/projects/{projectId}/integrations",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::integrate::models::ListIntegrationsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// Sends a message to an integration sink
pub async fn test_integration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    integration_id: crate::types::IntegrationId,
) -> crate::Result<()> {
    let url = format!("/integrate/v1/organizations/{organizationId}/projects/{projectId}/integrations/{integrationId}/test", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), integrationId=crate::utils::urlencode(integration_id));

    sender
        .send_request::<(), ()>(Method::POST, url, None, Some(()))
        .await
}
/// updates a integration
pub async fn update_integration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    integration_id: crate::types::IntegrationId,
    update_integration_request: crate::integrate::models::UpdateIntegrationRequest,
) -> crate::Result<()> {
    let url = format!("/integrate/v1/organizations/{organizationId}/projects/{projectId}/integrations/{integrationId}", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), integrationId=crate::utils::urlencode(integration_id));

    sender
        .send_request::<super::super::UpdateIntegrationRequest, ()>(
            Method::PUT,
            url,
            Some(&update_integration_request),
            Some(()),
        )
        .await
}

pub struct Integrations {
    sender: EscRequestSender,
}

impl<'a> Integrations {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// Creates a new integration
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        create_integration_request: crate::integrate::models::CreateIntegrationRequest,
    ) -> crate::Result<crate::integrate::models::CreateIntegrationResponse> {
        create_integration(
            &self.sender,
            organization_id,
            project_id,
            create_integration_request,
        )
        .await
    }

    /// deletes a integration
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        integration_id: crate::types::IntegrationId,
    ) -> crate::Result<()> {
        delete_integration(&self.sender, organization_id, project_id, integration_id).await
    }

    /// retrieves a integration
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        integration_id: crate::types::IntegrationId,
    ) -> crate::Result<crate::integrate::models::GetIntegrationResponse> {
        get_integration(&self.sender, organization_id, project_id, integration_id).await
    }

    /// list all integrations
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<crate::integrate::models::ListIntegrationsResponse> {
        list_integrations(&self.sender, organization_id, project_id).await
    }

    /// Sends a message to an integration sink
    pub async fn test_integration(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        integration_id: crate::types::IntegrationId,
    ) -> crate::Result<()> {
        test_integration(&self.sender, organization_id, project_id, integration_id).await
    }

    /// updates a integration
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        integration_id: crate::types::IntegrationId,
        update_integration_request: crate::integrate::models::UpdateIntegrationRequest,
    ) -> crate::Result<()> {
        update_integration(
            &self.sender,
            organization_id,
            project_id,
            integration_id,
            update_integration_request,
        )
        .await
    }
} // end Integrations
