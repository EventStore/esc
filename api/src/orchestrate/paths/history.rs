/*
 * Event Store Cloud Orchestrate API
 *
 * Orchestrates on going tasks, such as scheduled jobs
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// shows orchestration history
pub async fn list_history(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    _job_id: Option<String>,
) -> crate::Result<crate::orchestrate::models::GetHistoryResponse> {
    let url = format!(
        "/orchestrate/v1/organizations/{organizationId}/projects/{projectId}/history",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::orchestrate::models::GetHistoryResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}

pub struct History {
    sender: EscRequestSender,
}

impl<'a> History {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// shows orchestration history
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        job_id: Option<String>,
    ) -> crate::Result<crate::orchestrate::models::GetHistoryResponse> {
        list_history(&self.sender, organization_id, project_id, job_id).await
    }
} // end History
