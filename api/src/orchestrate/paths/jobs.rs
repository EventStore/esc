/*
 * Event Store Cloud Orchestrate API
 *
 * Orchestrates on going tasks, such as scheduled jobs
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// creates a new job
pub async fn create_job(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    create_job_request: crate::orchestrate::models::CreateJobRequest,
) -> crate::Result<crate::orchestrate::models::CreateJobResponse> {
    let url = format!(
        "/orchestrate/v1/organizations/{organizationId}/projects/{projectId}/jobs",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender.send_request::<
        super::super::CreateJobRequest,
        crate::orchestrate::models::CreateJobResponse
    >(
        Method::POST,
        url,
        Some(&create_job_request), None
    ).await
}
/// delete a job
pub async fn delete_job(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    job_id: crate::types::JobId,
) -> crate::Result<()> {
    let url = format!(
        "/orchestrate/v1/organizations/{organizationId}/projects/{projectId}/jobs/{jobId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        jobId = crate::utils::urlencode(job_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// gets a job
pub async fn get_job(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    job_id: crate::types::JobId,
) -> crate::Result<crate::orchestrate::models::GetJobResponse> {
    let url = format!(
        "/orchestrate/v1/organizations/{organizationId}/projects/{projectId}/jobs/{jobId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id),
        jobId = crate::utils::urlencode(job_id)
    );

    sender
        .send_request::<(), crate::orchestrate::models::GetJobResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// returns the list of jobs under a project
pub async fn list_jobs(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<crate::orchestrate::models::ListJobsResponse> {
    let url = format!(
        "/orchestrate/v1/organizations/{organizationId}/projects/{projectId}/jobs",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::orchestrate::models::ListJobsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}

pub struct Jobs {
    sender: EscRequestSender,
}

impl<'a> Jobs {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// creates a new job
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        create_job_request: crate::orchestrate::models::CreateJobRequest,
    ) -> crate::Result<crate::orchestrate::models::CreateJobResponse> {
        create_job(
            &self.sender,
            organization_id,
            project_id,
            create_job_request,
        )
        .await
    }

    /// delete a job
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        job_id: crate::types::JobId,
    ) -> crate::Result<()> {
        delete_job(&self.sender, organization_id, project_id, job_id).await
    }

    /// gets a job
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        job_id: crate::types::JobId,
    ) -> crate::Result<crate::orchestrate::models::GetJobResponse> {
        get_job(&self.sender, organization_id, project_id, job_id).await
    }

    /// returns the list of jobs under a project
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<crate::orchestrate::models::ListJobsResponse> {
        list_jobs(&self.sender, organization_id, project_id).await
    }
} // end Jobs
