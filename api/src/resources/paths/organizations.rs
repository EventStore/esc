/*
 * EventStore Cloud Resources API
 *
 * APIs used to access customer defined resources
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// Creates a new organization
pub async fn create_organization(
    sender: &EscRequestSender,
    create_organization_request: crate::resources::models::CreateOrganizationRequest,
) -> crate::Result<crate::resources::models::CreateOrganizationResponse> {
    let url = format!("/resources/v1/organizations");

    sender.send_request::<
        super::super::CreateOrganizationRequest,
        crate::resources::models::CreateOrganizationResponse
    >(
        Method::POST,
        url,
        Some(&create_organization_request), None
    ).await
}
/// Deletes an organization by ID.
pub async fn delete_organization(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<()> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// Gets a single organization by ID.
pub async fn get_organization(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<crate::resources::models::GetOrganizationResponse> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::resources::models::GetOrganizationResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// Lists organizations under the account owned by the credentials
pub async fn list_organizations(
    sender: &EscRequestSender,
) -> crate::Result<crate::resources::models::ListOrganizationsResponse> {
    let url = format!("/resources/v1/organizations");

    sender
        .send_request::<(), crate::resources::models::ListOrganizationsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// Deletes an organization by ID.
pub async fn update_organization(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    update_organization_request: crate::resources::models::UpdateOrganizationRequest,
) -> crate::Result<crate::resources::models::GetOrganizationResponse> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender.send_request::<
        super::super::UpdateOrganizationRequest,
        crate::resources::models::GetOrganizationResponse
    >(
        Method::PUT,
        url,
        Some(&update_organization_request), None
    ).await
}

pub struct Organizations {
    sender: EscRequestSender,
}

impl<'a> Organizations {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// Creates a new organization
    pub async fn create(
        &self,
        create_organization_request: crate::resources::models::CreateOrganizationRequest,
    ) -> crate::Result<crate::resources::models::CreateOrganizationResponse> {
        create_organization(&self.sender, create_organization_request).await
    }

    /// Deletes an organization by ID.
    pub async fn delete(&self, organization_id: crate::types::OrgId) -> crate::Result<()> {
        delete_organization(&self.sender, organization_id).await
    }

    /// Gets a single organization by ID.
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
    ) -> crate::Result<crate::resources::models::GetOrganizationResponse> {
        get_organization(&self.sender, organization_id).await
    }

    /// Lists organizations under the account owned by the credentials
    pub async fn list(&self) -> crate::Result<crate::resources::models::ListOrganizationsResponse> {
        list_organizations(&self.sender).await
    }

    /// Deletes an organization by ID.
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        update_organization_request: crate::resources::models::UpdateOrganizationRequest,
    ) -> crate::Result<crate::resources::models::GetOrganizationResponse> {
        update_organization(&self.sender, organization_id, update_organization_request).await
    }
} // end Organizations
