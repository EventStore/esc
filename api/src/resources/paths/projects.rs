/*
 * EventStore Cloud Resources API
 *
 * APIs used to access customer defined resources
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// Creates a new project
pub async fn create_project(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    create_project_request: crate::resources::models::CreateProjectRequest,
) -> crate::Result<crate::resources::models::CreateProjectResponse> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}/projects",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender.send_request::<
        super::super::CreateProjectRequest,
        crate::resources::models::CreateProjectResponse
    >(
        Method::POST,
        url,
        Some(&create_project_request), None
    ).await
}
/// Deletes project
pub async fn delete_project(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<()> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}/projects/{projectId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// Get project
pub async fn get_project(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<crate::resources::models::GetProjectResponse> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}/projects/{projectId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::resources::models::GetProjectResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// List projects
pub async fn list_projects(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
) -> crate::Result<crate::resources::models::ListProjectsResponse> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}/projects",
        organizationId = crate::utils::urlencode(organization_id)
    );

    sender
        .send_request::<(), crate::resources::models::ListProjectsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// Updates a project
pub async fn update_project(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    update_project_request: crate::resources::models::UpdateProjectRequest,
) -> crate::Result<()> {
    let url = format!(
        "/resources/v1/organizations/{organizationId}/projects/{projectId}",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<super::super::UpdateProjectRequest, ()>(
            Method::PUT,
            url,
            Some(&update_project_request),
            Some(()),
        )
        .await
}

pub struct Projects {
    sender: EscRequestSender,
}

impl<'a> Projects {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// Creates a new project
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        create_project_request: crate::resources::models::CreateProjectRequest,
    ) -> crate::Result<crate::resources::models::CreateProjectResponse> {
        create_project(&self.sender, organization_id, create_project_request).await
    }

    /// Deletes project
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<()> {
        delete_project(&self.sender, organization_id, project_id).await
    }

    /// Get project
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<crate::resources::models::GetProjectResponse> {
        get_project(&self.sender, organization_id, project_id).await
    }

    /// List projects
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
    ) -> crate::Result<crate::resources::models::ListProjectsResponse> {
        list_projects(&self.sender, organization_id).await
    }

    /// Updates a project
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        update_project_request: crate::resources::models::UpdateProjectRequest,
    ) -> crate::Result<()> {
        update_project(
            &self.sender,
            organization_id,
            project_id,
            update_project_request,
        )
        .await
    }
} // end Projects
