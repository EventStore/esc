/*
 * Event Store Integrations API
 *
 * Manages third-party integrations with the Event Store Cloud.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: esc@eventstore.com
 * Generated by: https://openapi-generator.tech
 */

use crate::sender::EscRequestSender;
use reqwest::Method;

/// Creates a new configuration
pub async fn create_configuration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    create_configuration_request: crate::integrations::models::CreateConfigurationRequest,
) -> crate::Result<crate::integrations::models::CreateConfigurationResponse> {
    let url = format!(
        "/integrations/v1/organizations/{organizationId}/projects/{projectId}/configurations",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender.send_request::<
        super::super::CreateConfigurationRequest,
        crate::integrations::models::CreateConfigurationResponse
    >(
        Method::POST,
        url,
        Some(&create_configuration_request), None
    ).await
}
/// deletes a configuration
pub async fn delete_configuration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    configuration_id: crate::types::ConfigurationId,
) -> crate::Result<()> {
    let url = format!("/integrations/v1/organizations/{organizationId}/projects/{projectId}/configurations/{configurationId}", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), configurationId=crate::utils::urlencode(configuration_id));

    sender
        .send_request::<(), ()>(Method::DELETE, url, None, Some(()))
        .await
}
/// retrieves a configuration
pub async fn get_configuration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    configuration_id: crate::types::ConfigurationId,
) -> crate::Result<crate::integrations::models::GetConfigurationResponse> {
    let url = format!("/integrations/v1/organizations/{organizationId}/projects/{projectId}/configurations/{configurationId}", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), configurationId=crate::utils::urlencode(configuration_id));

    sender
        .send_request::<(), crate::integrations::models::GetConfigurationResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// list all configurations
pub async fn list_configurations(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
) -> crate::Result<crate::integrations::models::ListConfigurationsResponse> {
    let url = format!(
        "/integrations/v1/organizations/{organizationId}/projects/{projectId}/configurations",
        organizationId = crate::utils::urlencode(organization_id),
        projectId = crate::utils::urlencode(project_id)
    );

    sender
        .send_request::<(), crate::integrations::models::ListConfigurationsResponse>(
            Method::GET,
            url,
            None,
            None,
        )
        .await
}
/// updates a configuration
pub async fn update_configuration(
    sender: &EscRequestSender,
    organization_id: crate::types::OrgId,
    project_id: crate::types::ProjectId,
    configuration_id: crate::types::ConfigurationId,
    update_configuration_request: crate::integrations::models::UpdateConfigurationRequest,
) -> crate::Result<()> {
    let url = format!("/integrations/v1/organizations/{organizationId}/projects/{projectId}/configurations/{configurationId}", organizationId=crate::utils::urlencode(organization_id), projectId=crate::utils::urlencode(project_id), configurationId=crate::utils::urlencode(configuration_id));

    sender
        .send_request::<super::super::UpdateConfigurationRequest, ()>(
            Method::PUT,
            url,
            Some(&update_configuration_request),
            Some(()),
        )
        .await
}

pub struct Configurations {
    sender: EscRequestSender,
}

impl<'a> Configurations {
    pub fn new(sender: EscRequestSender) -> Self {
        Self { sender }
    }

    /// Creates a new configuration
    pub async fn create(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        create_configuration_request: crate::integrations::models::CreateConfigurationRequest,
    ) -> crate::Result<crate::integrations::models::CreateConfigurationResponse> {
        create_configuration(
            &self.sender,
            organization_id,
            project_id,
            create_configuration_request,
        )
        .await
    }

    /// deletes a configuration
    pub async fn delete(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        configuration_id: crate::types::ConfigurationId,
    ) -> crate::Result<()> {
        delete_configuration(&self.sender, organization_id, project_id, configuration_id).await
    }

    /// retrieves a configuration
    pub async fn get(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        configuration_id: crate::types::ConfigurationId,
    ) -> crate::Result<crate::integrations::models::GetConfigurationResponse> {
        get_configuration(&self.sender, organization_id, project_id, configuration_id).await
    }

    /// list all configurations
    pub async fn list(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
    ) -> crate::Result<crate::integrations::models::ListConfigurationsResponse> {
        list_configurations(&self.sender, organization_id, project_id).await
    }

    /// updates a configuration
    pub async fn update(
        &self,
        organization_id: crate::types::OrgId,
        project_id: crate::types::ProjectId,
        configuration_id: crate::types::ConfigurationId,
        update_configuration_request: crate::integrations::models::UpdateConfigurationRequest,
    ) -> crate::Result<()> {
        update_configuration(
            &self.sender,
            organization_id,
            project_id,
            configuration_id,
            update_configuration_request,
        )
        .await
    }
} // end Configurations
